---
import { getCollection } from "astro:content";
import TagListWrapper from "./TagListWrapper.astro";

interface Props {
  currentTopic?: string;
  tags?: string[];
  wrapper?: boolean;
}

const { currentTopic, tags, wrapper = true } = Astro.props;

// If tags are provided, use them; otherwise fetch all topics
let topics: string[];
if (tags) {
  topics = tags;
} else {
  const allSculptures = await getCollection("sculptures");
  topics = [...new Set(allSculptures.map((sculpture) => sculpture.data.tags).flat())];
}

// Show "all" link only when displaying all topics (tags not provided)
const showAll = !tags;

// Determine if "all" should be active (homepage, sculptures page, or no current topic)
const isAllActive = !currentTopic || Astro.url.pathname === "/" || Astro.url.pathname === "/sculptures";
---

<TagListWrapper wrapper={wrapper}>
  <div class="tag-list">
    <nav aria-label="Topics">
      <ul class="cluster" role="list">
        {
          showAll && (
            <li>
              <a href={`/`} class="radius" aria-current={isAllActive ? "page" : undefined}>
                {" "}
                all{" "}
              </a>
            </li>
          )
        }
        {
          topics.map((topic) => {
            const topicSlug = topic.replace(/\s+/g, "-").toLowerCase();
            return (
              <li>
                <a
                  href={`/topics/${topicSlug}`}
                  class="radius"
                  aria-current={currentTopic === topic ? "page" : undefined}
                >
                  {topic}
                </a>
              </li>
            );
          })
        }
      </ul>
    </nav>
  </div>
</TagListWrapper>
